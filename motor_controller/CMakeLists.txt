cmake_minimum_required(VERSION 2.8.3)
project(motor_controller)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS 
	roscpp 
	rospy 
	std_msgs 
	hardware_interface
	common_files
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate added messages and services with any dependencies listed here

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need

#configure the package's catkin stuff
catkin_package(
	INCLUDE_DIRS include
	LIBRARIES motor_utils
	CATKIN_DEPENDS roscpp rospy std_msgs common_files hardware_interface
)


###########
## Build ##
###########

#create a "library" of files to be linked
add_library(
	motor_utils
	include/matrix.cpp
  	include/controller.cpp
)

#make the package aware of its include folder
include_directories(
	${catkin_INCLUDE_DIRS}
  	include ${catkin_INCLUDE_DIRS}
)

add_executable(motor_node src/motor_node.cpp)
target_link_libraries(motor_node ${catkin_LIBRARIES} motor_utils hardware_utils)
add_dependencies(motor_node motor_controller_generate_messages_cpp)

#add_executable(linear_actuator_node src/linear_actuator_node.cpp)
#target_link_libraries(linear_actuator_node ${catkin_LIBRARIES} motor_utils hardware_utils)
#add_dependencies(linear_actuator_node motor_controller_generate_messages_cpp)

#add_executable(bucket_motor_node src/bucket_motor_node.cpp)# src/controller.cpp src/matrix.cpp)
#target_link_libraries(bucket_motor_node ${catkin_LIBRARIES})
#add_dependencies(bucket_motor_node motor_controller_generate_messages_cpp)

## Mark executables for installation
install(TARGETS motor_utils 
   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
 )

## Mark cpp header files for installation
 install(DIRECTORY include/${PROJECT_NAME}/
   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
 )
